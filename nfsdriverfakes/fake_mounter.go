// This file was generated by counterfeiter
package nfsdriverfakes

import (
	"context"
	"sync"

	"code.cloudfoundry.org/lager"
	"code.cloudfoundry.org/nfsdriver"
)

type FakeMounter struct {
	MountStub        func(logger lager.Logger, ctx context.Context, source string, target string, opts map[string]interface{}) error
	mountMutex       sync.RWMutex
	mountArgsForCall []struct {
		logger lager.Logger
		ctx    context.Context
		source string
		target string
		opts   map[string]interface{}
	}
	mountReturns struct {
		result1 error
	}
	UnmountStub        func(logger lager.Logger, ctx context.Context, target string) error
	unmountMutex       sync.RWMutex
	unmountArgsForCall []struct {
		logger lager.Logger
		ctx    context.Context
		target string
	}
	unmountReturns struct {
		result1 error
	}
}

func (fake *FakeMounter) Mount(logger lager.Logger, ctx context.Context, source string, target string, opts map[string]interface{}) error {
	fake.mountMutex.Lock()
	fake.mountArgsForCall = append(fake.mountArgsForCall, struct {
		logger lager.Logger
		ctx    context.Context
		source string
		target string
		opts   map[string]interface{}
	}{logger, ctx, source, target, opts})
	fake.mountMutex.Unlock()
	if fake.MountStub != nil {
		return fake.MountStub(logger, ctx, source, target, opts)
	} else {
		return fake.mountReturns.result1
	}
}

func (fake *FakeMounter) MountCallCount() int {
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	return len(fake.mountArgsForCall)
}

func (fake *FakeMounter) MountArgsForCall(i int) (lager.Logger, context.Context, string, string, map[string]interface{}) {
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	return fake.mountArgsForCall[i].logger, fake.mountArgsForCall[i].ctx, fake.mountArgsForCall[i].source, fake.mountArgsForCall[i].target, fake.mountArgsForCall[i].opts
}

func (fake *FakeMounter) MountReturns(result1 error) {
	fake.MountStub = nil
	fake.mountReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMounter) Unmount(logger lager.Logger, ctx context.Context, target string) error {
	fake.unmountMutex.Lock()
	fake.unmountArgsForCall = append(fake.unmountArgsForCall, struct {
		logger lager.Logger
		ctx    context.Context
		target string
	}{logger, ctx, target})
	fake.unmountMutex.Unlock()
	if fake.UnmountStub != nil {
		return fake.UnmountStub(logger, ctx, target)
	} else {
		return fake.unmountReturns.result1
	}
}

func (fake *FakeMounter) UnmountCallCount() int {
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	return len(fake.unmountArgsForCall)
}

func (fake *FakeMounter) UnmountArgsForCall(i int) (lager.Logger, context.Context, string) {
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	return fake.unmountArgsForCall[i].logger, fake.unmountArgsForCall[i].ctx, fake.unmountArgsForCall[i].target
}

func (fake *FakeMounter) UnmountReturns(result1 error) {
	fake.UnmountStub = nil
	fake.unmountReturns = struct {
		result1 error
	}{result1}
}

var _ nfsdriver.Mounter = new(FakeMounter)
